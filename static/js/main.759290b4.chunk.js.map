{"version":3,"sources":["components/Joke/index.js","components/JokeList/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","styles","borderColor","getColor","data-test","className","onClick","upvote","style","downvote","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","joke","handleClick","bind","length","getJokes","numJokesToGet","axios","get","headers","Accept","response","newJoke","data","has","push","id","uuid","setState","setItem","stringify","delta","sort","a","b","jokeObj","key","handleVote","alt","src","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.759290b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component {\r\n  getColor() {\r\n    if (this.props.votes >= 15) return \"#4CAF50\";\r\n    else if (this.props.votes >= 12) return \"#8BC34A\";\r\n    else if (this.props.votes >= 9) return \"#CDDC39\";\r\n    else if (this.props.votes >= 6) return \"#FFEB3B\";\r\n    else if (this.props.votes >= 3) return \"#FFC107\";\r\n    else if (this.props.votes >= 0) return \"#FF9800\";\r\n    else return \"#F44336\";\r\n  }\r\n\r\n  getEmoji() {\r\n    if (this.props.votes >= 15) return \"em em-rolling_on_the_floor_laughing\";\r\n    else if (this.props.votes >= 12) return \"em em-laughing\";\r\n    else if (this.props.votes >= 9) return \"em em-smiley\";\r\n    else if (this.props.votes >= 6) return \"em em-slightly_smiling_face\";\r\n    else if (this.props.votes >= 3) return \"em em-neutral_face\";\r\n    else if (this.props.votes >= 0) return \"em em-confused\";\r\n    else return \"em em-angry\";\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      borderColor: {\r\n        borderColor: this.getColor()\r\n      }\r\n    };\r\n    return (\r\n      <div data-test='Joke' className='Joke'>\r\n        <div className='Joke-buttons'>\r\n          <i data-test='Joke-upvote' className='fas fa-arrow-up' onClick={this.props.upvote}></i>\r\n          <span className='Joke-votes' style={styles.borderColor}>\r\n            {this.props.votes}\r\n          </span>\r\n          <i className='fas fa-arrow-down' onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className='Joke-text'>{this.props.text}</div>\r\n        <div className='Joke-smiley'>\r\n          <i className={this.getEmoji()} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./JokeList.css\";\r\nimport Joke from \"../Joke/\";\r\n\r\nclass JokeList extends Component {\r\n  static defaultProps = {\r\n    numJokesToGet: 10\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n      loading: false\r\n    };\r\n    /*\r\n      create a Set to keep track of jokes to prevent duplicate jokes\r\n    */\r\n    this.seenJokes = new Set(this.state.jokes.map(joke => joke.text));\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n\r\n  async getJokes() {\r\n    try {\r\n      let jokes = [];\r\n\r\n      while (jokes.length < this.props.numJokesToGet) {\r\n        let response = await axios.get(\"https://icanhazdadjoke.com/\", {\r\n          headers: {\r\n            Accept: \"application/json\"\r\n          }\r\n        });\r\n\r\n        let newJoke = response.data.joke;\r\n        /*\r\n          if the joke doesnt exist in the Set, add the new joke\r\n        */\r\n        if (!this.seenJokes.has(newJoke)) jokes.push({ id: uuid(), text: response.data.joke, votes: 0 });\r\n      }\r\n\r\n      this.setState(\r\n        state => ({\r\n          jokes: [...state.jokes, ...jokes],\r\n          loading: false\r\n        }),\r\n        /*\r\n          update the local storage jokes\r\n        */\r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n      );\r\n    } catch (error) {\r\n      /*\r\n        set loading false to load the jokes in the local storage in case if there was something wrong with getting jokes from the API \r\n      */\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  handleVote(id, delta) {\r\n    this.setState(\r\n      state => ({\r\n        /* \r\n          go through jokes\r\n          find the joke with the id passed in and add the delta to that jokes votes\r\n        */\r\n        jokes: state.jokes.map(joke => (joke.id === id ? { ...joke, votes: joke.votes + delta } : joke))\r\n      }),\r\n      /*\r\n        update the local storage jokes\r\n      */\r\n      () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ loading: true }, this.getJokes);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className='JokeList-spinner'>\r\n          <i className='far fa-8x fa-laugh fa-spin'></i>\r\n          <h1 className='JokeList-title'>Loading...</h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const SortedJokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n\r\n    const jokes = SortedJokes.map(jokeObj => (\r\n      <Joke\r\n        key={jokeObj.id}\r\n        text={jokeObj.text}\r\n        votes={jokeObj.votes}\r\n        upvote={() => this.handleVote(jokeObj.id, 1)}\r\n        downvote={() => this.handleVote(jokeObj.id, -1)}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div data-test='JokeListComponent' className='JokeList'>\r\n        <div className='JokeList-sidebar'>\r\n          <h1 className='JokeList-title'>\r\n            <span>Dad</span> Jokes\r\n          </h1>\r\n          <img\r\n            alt='sidebar smiley face'\r\n            src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\r\n          />\r\n          <button data-test='JokeList-getmore' className='JokeList-getmore' onClick={this.handleClick}>\r\n            New Jokes\r\n          </button>\r\n        </div>\r\n        <div className='JokeList-jokes'>{jokes}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JokeList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport JokeList from \"../JokeList/\";\n\nfunction App() {\n  return (\n    <div data-test='AppComponent' className='App'>\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}